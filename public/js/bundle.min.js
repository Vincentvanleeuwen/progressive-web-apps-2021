async function cachePlaylist(){const pathname=window.location.pathname;if(!pathname.includes("/playlists/"))return;const cache=await caches.open("playlist-cache");if(navigator.onLine){const res=await fetch(pathname);await cache.put(pathname,res)}else window.addEventListener("onLine",async()=>{const registration=await navigator.serviceWorker.getRegistration();await registration.sync.register("sync-playlists")})}"serviceWorker"in navigator&&cachePlaylist();const copyBtn=document.getElementById("copy-button"),copyTxt=document.getElementById("copy-text");copyBtn&&copyTxt&&copyBtn.addEventListener("click",()=>{copyTxt.focus(),copyTxt.select();try{const msg=document.execCommand("copy")?"successful":"unsuccessful";console.log("Copying text command was "+msg),copyBtn.innerHTML="Copied URL"}catch(err){console.log("Oops, unable to copy"),copyBtn.innerHTML="Please retry"}});const offlinePlaylists=document.querySelector(".offline-playlists");offlinePlaylists&&caches.open("playlist-cache").then(cache=>cache.keys()).then(keys=>keys.map(key=>key.url)).then(urls=>{urls.forEach(url=>{offlinePlaylists.innerHTML+=`<li><a href="${url}">${url}</a></li>`})});const divInstall=document.getElementById("installContainer"),butInstall=document.getElementById("butInstall");butInstall.addEventListener("click",async()=>{console.log("👍","butInstall-clicked");const promptEvent=window.deferredPrompt;if(!promptEvent)return;promptEvent.prompt();const result=await promptEvent.userChoice;console.log("👍","userChoice",result),window.deferredPrompt=null,divInstall.classList.toggle("hidden",!0)}),"serviceWorker"in navigator&&window.addEventListener("load",()=>{navigator.serviceWorker.register("../sw.js").then(reg=>{reg.installing?console.log("Service worker installing"):reg.waiting?console.log("Service worker installed"):reg.active&&console.log("Service worker active")}).catch(error=>console.log("Registration failed with "+error))});