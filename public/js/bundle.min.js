async function e(){const e=window.location.pathname;if(!e.includes("/playlists/"))return;const n=await caches.open("playlist-cache");if(navigator.onLine){const t=await fetch(e);await n.put(e,t)}else window.addEventListener("onLine",async()=>{const e=await navigator.serviceWorker.getRegistration();await e.sync.register("sync-playlists")})}"serviceWorker"in navigator&&e();const n=document.getElementById("copy-button"),t=document.getElementById("copy-text");n&&t&&n.addEventListener("click",()=>{t.focus(),t.select();try{const e=document.execCommand("copy")?"successful":"unsuccessful";console.log("Copying text command was "+e),n.innerHTML="Copied URL"}catch(e){console.log("Oops, unable to copy"),n.innerHTML="Please retry"}});const o=document.querySelector(".offline-playlists");o&&caches.open("playlist-cache").then(e=>e.keys()).then(e=>e.map(e=>e.url)).then(e=>{e.forEach(e=>{o.innerHTML+=`<li><a href="${e}">${e}</a></li>`})});const c=document.getElementById("installContainer"),i=document.getElementById("butInstall");i.addEventListener("click",async()=>{console.log("👍","butInstall-clicked");const e=window.deferredPrompt;if(!e)return;e.prompt();const n=await e.userChoice;console.log("👍","userChoice",n),window.deferredPrompt=null,c.classList.toggle("hidden",!0)}),"serviceWorker"in navigator&&window.addEventListener("load",()=>{navigator.serviceWorker.register("../sw.js").then(e=>{e.installing?console.log("Service worker installing"):e.waiting?console.log("Service worker installed"):e.active&&console.log("Service worker active")}).catch(e=>console.log("Registration failed with "+e))});